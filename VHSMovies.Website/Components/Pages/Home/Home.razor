@page "/"
@page "/home"

@using VHSMovies.Api.Integration.Main.Clients
@using VHSMovies.Api.Integration.Main.Queries
@using VHSMovies.Api.Integration.Main.Responses
@using VHSMovies.Website.Components.Pages.Titles
@using VHSMovies.Website.Components.Shared

@inject ITitlesClient titlesClient
@inject HttpClient httpClient

@if (loading)
{
    <Loading />
}
else
{    
    <section class="recommendation-section hero-section">
        <MudContainer class="container">
            <h2>Get Personalized Movie Recommendations</h2>
            <p>Tell us what you like, and we'll suggest your next favorite film</p>
        </MudContainer>
    </section>

    <section class="movies">

        <MudContainer class="container">
            <div class="d-flex flex-row justify-content-end align-items-center position-relative">
                <h2 class="position-absolute start-50 translate-middle-x m-0">Recommended Movies</h2>

                <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                    Color="Color.Default"
                    ClickPropagation="true"
                    Edge="Edge.End" 
                    Style="right:10px"
                    OnClick="LoadTitles" />
            </div>

            <div class="movie-grid">
                @foreach (TitleResponse title in Titles)
                {
                    <TitleCard @key="@title.Id" Title="@title" AsyncMethod="() => ExcludeTitleCard(title)" />
                }
            </div>
        </MudContainer>
    </section>
}

@code {
    private bool loading;

    private List<TitleResponse> Titles = new List<TitleResponse>();

    private List<TitleResponse> selectedExcludeTitles = new List<TitleResponse>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTitles();
    }

    private async Task LoadTitles()
    {
        try
        {
            loading = true;

            GetMostRelevantTitlesQuery query = new GetMostRelevantTitlesQuery()
            {
                TitlesAmount = 12,
                TitlesToExclude = selectedExcludeTitles.Select(t => t.Id).ToList()
            };

            Titles = await titlesClient.GetMostRelevantTitles(query);
        }
        catch (TaskCanceledException ex)
        {
            Console.WriteLine("Timeout: The request took too long and was cancelled.");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected Error: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task ExcludeTitleCard(TitleResponse Title)
    {
        Titles.Remove(Title);
        selectedExcludeTitles.Add(Title);

        Titles = Titles.ToList();

        StateHasChanged();
    }
}