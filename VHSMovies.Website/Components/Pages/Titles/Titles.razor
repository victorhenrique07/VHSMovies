@page "/titles"

@using VHSMovies.Api.Integration.Main.Clients
@using VHSMovies.Api.Integration.Main.Queries
@using VHSMovies.Api.Integration.Main.Responses
@using VHSMovies.Website.Components.Pages.Home
@using VHSMovies.Website.Components.Shared

@inject ITitlesClient titlesClient
@inject IGenresClient genresClient

@if (loading)
{
    <LoadingContainer Color="@(websiteDetails.IsDarkMode ? Color.Primary : Color.Secondary)" />
}
else
{
    <BackgroundStyle>
        <div class="d-flex justify-content-center align-items-center">
            <MudCarousel Class="mud-width-full d-flex align-content-center justify-content-center z-1 mb-20" Style="height:475px;width:1034px;" ShowBullets="false" TData="TitleResponse" AutoCycle="false">
                @foreach (TitleResponse title in mostRelevantTitles)
                {
                    <MudCarouselItem Transition="Transition.Fade" Class="d-flex flex-column align-items-center justify-content-center text-center">
                        <div>
                            <img src="@title.PosterImageUrl" class="rounded-lg movie-image carousel-background" />
                        </div>
                        <div>
                            <MudBadge Origin="Origin.TopRight" Content="@title.AverageRating.ToString()" Color="Color.Success" Overlap="true">
                                <img src="@title.PosterImageUrl" style="height:300px; width:100%; object-fit: cover; padding:0; margin:0; border:none;" class="rounded-lg movie-image" />
                            </MudBadge>
                            <MudText Typo="Typo.body2" Class="mt-2 title-name">@title.Name</MudText>
                        </div>
                    </MudCarouselItem>
                }
            </MudCarousel>
        </div>

        <div class="pb-20">
            <Topic TopicName="Available Genres" />

            <MudPaper Elevation="2" Class="genres d-flex justify-content-center align-items-center flex-column" Style="margin: auto;">
                <div class="d-block">
                    <MudGrid Class="d-flex align-items" Justify="Justify.Center" Spacing="1" Style="max-width:700px;">
                        @foreach (GenreResponse genre in allGenres)
                        {
                            <MudItem xs="3" Style="min-width: 80px;max-width:110px;height:35px;" Class="pl-6 mx-7">
                                <MudPaper Class="py-1 pr-2" Width="100%" Elevation="0" Style="text-align: left;background-color: transparent;">
                                    <MudText Class="genre" @onclick="() => ToggleSelection(genre)" Color="@(selectedGenres.Contains(genre) ? Color.Primary : Color.Secondary)">
                                        @genre.Name
                                    </MudText>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </div>
                <div class="d-flex position-relative justify-content-end mr-20" style="width:100%;top:13%">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Check" OnClick="Apply"/>
                </div>
            </MudPaper>

        </div>

        <HomeTopics Titles="titlesByGenres">
            <Topic TopicName="Titles By Selected Genres">
                <div class="d-flex justify-content-end" style="width:100px;text-align:center">
                    <MudSelect Variant="Variant.Outlined" Label="Amount" T="int" @bind-Value="titlesAmount" SelectedValuesChanged="Apply">
                        <MudSelectItem T="int" Value="10">10</MudSelectItem>
                        <MudSelectItem T="int" Value="20">20</MudSelectItem>
                        <MudSelectItem T="int" Value="50">50</MudSelectItem>
                        <MudSelectItem T="int" Value="100">100</MudSelectItem>
                    </MudSelect>
                </div>
            </Topic>

            @if (titlesByGenres.Count() == 0)
            {
                <LoadingContainer Color="Color.Primary" />
            }
        </HomeTopics>
    </BackgroundStyle>
}


<style>
    .genre {
    font-family: ABeeZee;
    font-weight: 400;
    font-size: 24px;
    line-height: 22px;
    letter-spacing: 0px;
    color: var(--mud-palette-text-primary);
    width: 100%;
    transition: transform 0.3s ease, color 0.3s ease, text-shadow 0.3s ease;
    display: inline-block;
    text-underline-position: from-font;
    text-decoration-skip-ink: none;
    cursor: pointer;
    }

    .genre:hover {
    transform: scale(1.2);
    color: var(--mud-palette-text-secondary) !important;
    text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.7);
    }

    .pt-10 {
    position: relative;
    background-image: url('@(websiteDetails is not null ? websiteDetails.BackgroundImage : string.Empty)');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    }

    .pt-10::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(var(--mud-palette-secondary) 60%);
    backdrop-filter: blur(15px);
    z-index: 0;
    }

    .pt-10 > * {
    position: relative;
    z-index: 1;
    }

    .genres {
    width: 1000px;
    height: 390px;
    gap: 0px;
    border-radius: 40px;
    opacity: 0px;
    background-color: var(--mud-palette-tertiary);
    }

    .carousel-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    filter: blur(10px);
    z-index: -1;
    }

    .title-name {
    color: #FFFFFF;
    font-family: Hubballi;
    font-size: 12px;
    font-weight: 400;
    line-height: 11.47px;
    text-underline-position: from-font;
    text-decoration-skip-ink: none;
    text-align: center;
    margin-top: 6px;
    }
</style>


@code {
    [CascadingParameter]
    protected WebsiteDetails? websiteDetails { get; set; }

    private int titlesAmount = 10;
    private IReadOnlyCollection<TitleResponse> mostRelevantTitles;
    private IReadOnlyCollection<TitleResponse> titlesByGenres;
    private IReadOnlyCollection<GenreResponse> allGenres;

    private bool loading;

    private List<GenreResponse> selectedGenres = new List<GenreResponse>();

    private void ToggleSelection(GenreResponse genre)
    {
        if (selectedGenres.Contains(genre))
        {
            selectedGenres.Remove(genre);
        }
        else
        {
            selectedGenres.Add(genre);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        mostRelevantTitles = await titlesClient.GetMostRelevantTitles(new GetMostRelevantTitlesQuery());

        allGenres = await genresClient.GetAllGenres();

        foreach (var genre in allGenres)
        {
            if (genre.Name == "Science Fiction")
            {
                genre.Name = "Sci-Fi";
            }
        }

        loading = false;

        await Apply();
    }

    private async Task Apply()
    {
        titlesByGenres = new List<TitleResponse>();

        GetMostRelevantTitlesQuery query = new GetMostRelevantTitlesQuery
        {
            GenresId = selectedGenres.Select(x => x.Id).ToArray(),
            TitlesAmount = titlesAmount
        };

        titlesByGenres = await titlesClient.GetMostRelevantTitles(query);
    }
}
