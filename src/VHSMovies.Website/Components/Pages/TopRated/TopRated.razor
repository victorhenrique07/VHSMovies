@page "/top-rated"

@using VHSMovies.Api.Integration.Main.Clients
@using VHSMovies.Api.Integration.Main.Queries
@using VHSMovies.Api.Integration.Main.Responses
@using VHSMovies.Website.Components.Pages.Titles
@using VHSMovies.Website.Components.Shared

@inject ITitlesClient titlesClient

@if (loading)
{
    <Loading />
}
else
{
    if (loadingAction)
    {
        <Loading />
    }
    else
    {
        <TitleGrid Titles="@ActionTitles" SelectedExcludeTitles="selectedExcludeActionTitles" SectionTitle="Recommended Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
            Color="Color.Default"
            ClickPropagation="true"
            Edge="Edge.End"
            Style="right:10px"
            OnClick="LoadActionTitles" />
        </TitleGrid>
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
    }

    if (loadingSciFi)
    {
        <Loading />
    }
    else
    {
        <TitleGrid Titles="@SciFiTitles" SelectedExcludeTitles="selectedExcludeSciFiTitles" SectionTitle="Recommended Sci-Fi's">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
            Color="Color.Default"
            ClickPropagation="true"
            Edge="Edge.End"
            Style="right:10px"
            OnClick="LoadSciFiTitles" />
        </TitleGrid>
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
    }

    if (loadingThriller)
    {
        <Loading />
    }
    else
    {
        <TitleGrid Titles="@ThrillerTitles" SelectedExcludeTitles="selectedExcludeThrillerTitles" SectionTitle="Recommended Thrillers">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
            Color="Color.Default"
            ClickPropagation="true"
            Edge="Edge.End"
            Style="right:10px"
            OnClick="LoadThrillerTitles" />
        </TitleGrid>
    }
}

@code {
    private bool loading;
    private bool loadingAction;
    private bool loadingSciFi;
    private bool loadingThriller;

    private IList<TitleResponse> ActionTitles = new List<TitleResponse>();
    private IList<TitleResponse> SciFiTitles = new List<TitleResponse>();
    private IList<TitleResponse> ThrillerTitles = new List<TitleResponse>();

    private List<TitleResponse> selectedExcludeActionTitles = new List<TitleResponse>();
    private List<TitleResponse> selectedExcludeSciFiTitles = new List<TitleResponse>();
    private List<TitleResponse> selectedExcludeThrillerTitles = new List<TitleResponse>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            StateHasChanged();

            ActionTitles = await titlesClient.GetRecommendationsTitles(new GetRecommendedTitlesQuery()
            {
                MustInclude = new int[] { 1 },
                Types = new[] { 1 },
            });
            SciFiTitles = await titlesClient.GetRecommendationsTitles(new GetRecommendedTitlesQuery()
            {
                MustInclude = new int[] { 22 },
                Types = new[] { 1 },
            });
            ThrillerTitles = await titlesClient.GetRecommendationsTitles(new GetRecommendedTitlesQuery()
            {
                MustInclude = new int[] { 26 },
                Types = new[] { 1 },
            });
        }
        catch (TaskCanceledException ex)
        {
            throw new TimeoutException("Timeout: The request took too long and was cancelled.", ex);
        }
        catch (HttpRequestException ex)
        {
            throw new HttpRequestException($"Request Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new Exception($"Unexpected Error: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadActionTitles()
    {
        try
        {
            loadingAction = true;

            string titlesToExclude = string.Join(", ", selectedExcludeActionTitles.Select(t => t.Id));

            ActionTitles = await titlesClient.GetMostRelevantTitles(new GetMostRelevantTitlesQuery()
            {
                GenreId = 1,
                Types = new[] { 1 },
            });
        }
        catch (TaskCanceledException ex)
        {
            Console.WriteLine("[Action Movies] - Timeout: The request took too long and was cancelled.");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"[Action Movies] - Request Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Action Movies] - Unexpected Error: {ex.Message}");
        }
        finally
        {
            loadingAction = false;
            StateHasChanged();
        }
    }

    private async Task LoadSciFiTitles()
    {
        try
        {
            loadingSciFi = true;

            string titlesToExclude = string.Join(", ", selectedExcludeSciFiTitles.Select(t => t.Id));

            SciFiTitles = await titlesClient.GetMostRelevantTitles(new GetMostRelevantTitlesQuery()
            {
                GenreId = 22,
                Types = new[] { 1 },
            });
        }
        catch (TaskCanceledException ex)
        {
            Console.WriteLine("[Sci-Fi Movies] - Timeout: The request took too long and was cancelled.");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"[Sci-Fi Movies] - Request Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Sci-Fi Movies] - Unexpected Error: {ex.Message}");
        }
        finally
        {
            loadingSciFi = false;
            StateHasChanged();
        }
    }

    private async Task LoadThrillerTitles()
    {
        try
        {
            loadingThriller = true;

            string titlesToExclude = string.Join(", ", selectedExcludeThrillerTitles.Select(t => t.Id));

            ThrillerTitles = await titlesClient.GetMostRelevantTitles(new GetMostRelevantTitlesQuery()
            {
                GenreId = 26,
                Types = new[] { 1 },
            });
        }
        catch (TaskCanceledException ex)
        {
            throw new TimeoutException("Timeout: The request took too long and was cancelled.", ex);
        }
        catch (HttpRequestException ex)
        {
            throw new HttpRequestException($"Request Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new Exception($"Unexpected Error: {ex.Message}");
        }
        finally
        {
            loadingThriller = false;
            StateHasChanged();
        }
    }
}
