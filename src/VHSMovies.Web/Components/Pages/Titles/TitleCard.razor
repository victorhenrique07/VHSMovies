@using System.Globalization
@using VHSMovies.Api.Integration.Main.Responses
@using MudBlazor;

<a href="/title/@Title.Id">
    <MudCard class="movie-card">
        <MudCardHeader Class="pa-0">
            <CardHeaderContent>
                <div class="movie-poster">
                    <img src="@Title.BackdropImageUrl" alt="@Title.Name" onerror="this.style.display='none'">
                    <div class="movie-header-buttons position-absolute d-flex justify-content-between align-items-center">
                        <div class="movie-score">
                            @Title.AverageRating.ToString("N1", CultureInfo.GetCultureInfo("pt-BR"))
                        </div>
                        <div class="exclude-button align-items-center justify-content-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Close"
                                           Color="Color.Primary"
                                           OnClick="ExcludeTitle"
                                           ClickPropagation="true" />
                        </div>
                    </div>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent class="movie-info">
            <MudText Typo="Typo.h3">@Title.Name</MudText>
            <div class="movie-meta">
                @if (Title.ReleaseDate != null)
                {
                    <span class="year">@Title.ReleaseDate.Value.Year</span>
                }
            </div>
            <div class="movie-genres">
                @foreach (GenreResponse genre in Title.Genres)
                {
                    <MudChip Class="genre" T="string">@genre.Name</MudChip>
                }
            </div>
            <p class="movie-desc">@Title.Description</p>
        </MudCardContent>
    </MudCard>
</a>

@code {
    [Parameter]
    public TitleResponse Title { get; set; }

    [Parameter] public Func<Task> AsyncMethod { get; set; }

    private async Task ExcludeTitle()
    {
        if (AsyncMethod != null)
        {
            await AsyncMethod.Invoke();
        }
    }
}
