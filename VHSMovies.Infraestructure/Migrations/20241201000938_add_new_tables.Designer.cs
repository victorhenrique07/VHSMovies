// <auto-generated />
using LiveChat.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace VHSMovies.Infraestructure.Migrations
{
    [DbContext(typeof(DbContextClass))]
    [Migration("20241201000938_add_new_tables")]
    partial class add_new_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VHSMovies.Domain.Entity.Cast", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.HasKey("ActorId", "TitleId");

                    b.HasIndex("TitleId");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator().HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TitleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TVShowSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodesQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("TVShowId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TVShowId");

                    b.ToTable("TVShowSeasons");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasDiscriminator().HasValue("Title");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TitleDirectors", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int>("DirectorId")
                        .HasColumnType("integer");

                    b.HasKey("TitleId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("TitleDirectors");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TitleGenres", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("TitleId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TitleGenres");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TitleWriters", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int>("WriterId")
                        .HasColumnType("integer");

                    b.HasKey("TitleId", "WriterId");

                    b.HasIndex("WriterId");

                    b.ToTable("TitleWriters");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Actor", b =>
                {
                    b.HasBaseType("VHSMovies.Domain.Entity.Person");

                    b.HasDiscriminator().HasValue("Actor");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Director", b =>
                {
                    b.HasBaseType("VHSMovies.Domain.Entity.Person");

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Writer", b =>
                {
                    b.HasBaseType("VHSMovies.Domain.Entity.Person");

                    b.HasDiscriminator().HasValue("Writer");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Movie", b =>
                {
                    b.HasBaseType("VHSMovies.Domain.Entity.Title");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TVShow", b =>
                {
                    b.HasBaseType("VHSMovies.Domain.Entity.Title");

                    b.HasDiscriminator().HasValue("TVShow");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Cast", b =>
                {
                    b.HasOne("VHSMovies.Domain.Entity.Actor", "Actor")
                        .WithMany("Titles")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VHSMovies.Domain.Entity.Title", "Title")
                        .WithMany("Actors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Review", b =>
                {
                    b.HasOne("VHSMovies.Domain.Entity.Title", null)
                        .WithMany("Ratings")
                        .HasForeignKey("TitleId");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TVShowSeason", b =>
                {
                    b.HasOne("VHSMovies.Domain.Entity.TVShow", null)
                        .WithMany("Seasons")
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TitleDirectors", b =>
                {
                    b.HasOne("VHSMovies.Domain.Entity.Director", "Director")
                        .WithMany("Titles")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VHSMovies.Domain.Entity.Title", "Title")
                        .WithMany("Directors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TitleGenres", b =>
                {
                    b.HasOne("VHSMovies.Domain.Entity.Genre", "Genre")
                        .WithMany("Titles")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VHSMovies.Domain.Entity.Title", "Title")
                        .WithMany("Genres")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TitleWriters", b =>
                {
                    b.HasOne("VHSMovies.Domain.Entity.Title", "Title")
                        .WithMany("Writers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VHSMovies.Domain.Entity.Writer", "Writer")
                        .WithMany("Titles")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Genre", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Title", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Directors");

                    b.Navigation("Genres");

                    b.Navigation("Ratings");

                    b.Navigation("Writers");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Actor", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Director", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.Writer", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("VHSMovies.Domain.Entity.TVShow", b =>
                {
                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
